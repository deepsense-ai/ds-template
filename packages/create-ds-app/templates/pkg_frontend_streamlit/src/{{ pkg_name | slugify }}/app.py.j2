"""Main Streamlit application - Chatbot Interface."""

import streamlit as st
from datetime import datetime

from {{ pkg_name | slugify }}.utils.branding import load_branding_config, image_to_base64
from {{ pkg_name | slugify }}.components.sidebar import render_sidebar

branding = load_branding_config()

# Page configuration
st.set_page_config(
    page_title=branding["name"],
    page_icon="ðŸ’¬",
    layout="wide",
    initial_sidebar_state="collapsed",  # Set to "expanded" to show sidebar by default
)

# Initialize session state
if "conversations" not in st.session_state:
    st.session_state.conversations = {}
if "current_conversation_id" not in st.session_state:
    st.session_state.current_conversation_id = None
if "conversation_counter" not in st.session_state:
    st.session_state.conversation_counter = 0
if "messages" not in st.session_state:
    st.session_state.messages = []


def render_header() -> None:
    """Render the header with logo and name."""
    if branding["logo_path"]:
        img_data = image_to_base64(branding["logo_path"])
        st.markdown(
            f"""
            <h1 style='display: flex; align-items: center; gap: 10px;'>
                <img src='{img_data}' style='height: 1.2em; vertical-align: middle;' />
                mac_claude
            </h1>
            """,
            unsafe_allow_html=True
        )
    else:
        st.header(branding["name"])
    border_color =  branding.get("primary_color", "#1B54FF")
    st.markdown(f"<hr style='border: 0.1em solid {border_color};'>", unsafe_allow_html=True)


def main():
    """Main application function."""
    # Sidebar: Uncomment the line below to enable conversation history sidebar
    # render_sidebar()

    # Render header
    render_header()

    # Display chat messages
    for message in st.session_state.messages:
        role = message["role"]
        content = message["content"]
        with st.chat_message(name=role):
            st.markdown(content)

    # Chat input
    if user_input := st.chat_input("Type your message here..."):
        # Add user message
        st.session_state.messages.append({
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now().strftime("%H:%M")
        })

        # Display user message
        with st.chat_message("user"):
            st.markdown(user_input)

        # TODO: Integrate your AI/API logic here
        # For streaming responses, use this pattern:
        # with st.chat_message("assistant"):
        #     st.write_stream(response_generator(history))

        # Placeholder response
        assistant_response = "This is a placeholder. Integrate your AI/API here."

        # Display assistant message
        with st.chat_message("assistant"):
            st.markdown(assistant_response)

        # Add assistant message to history
        st.session_state.messages.append({
            "role": "assistant",
            "content": assistant_response,
            "timestamp": datetime.now().strftime("%H:%M")
        })

        # Save to current conversation if sidebar is enabled
        if st.session_state.current_conversation_id:
            st.session_state.conversations[st.session_state.current_conversation_id]["messages"] = st.session_state.messages


if __name__ == "__main__":
    main()
