"""Main Streamlit application."""

import streamlit as st
import pandas as pd
import plotly.express as px
from pathlib import Path

from {{ pkg_name }}.config import settings
from {{ pkg_name }}.components.sidebar import render_sidebar
from {{ pkg_name }}.utils.data_loader import load_sample_data

# Page configuration
st.set_page_config(
    page_title="{{ app_title }}",
    page_icon="🚀",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Initialize session state
if "data" not in st.session_state:
    st.session_state.data = None
if "counter" not in st.session_state:
    st.session_state.counter = 0


def main():
    """Main application function."""

    # Render sidebar
    filters = render_sidebar()

    # Main content
    st.title("🚀 {{ app_title }}")
    st.markdown("---")

    # Create tabs
    tab1, tab2, tab3 = st.tabs(["📊 Dashboard", "📈 Analytics", "⚙️ Settings"])

    with tab1:
        render_dashboard(filters)

    with tab2:
        render_analytics()

    with tab3:
        render_settings()


def render_dashboard(filters):
    """Render the dashboard tab."""
    col1, col2, col3 = st.columns(3)

    # Metrics
    with col1:
        st.metric(
            label="Total Records",
            value="1,234",
            delta="123 (10%)",
        )

    with col2:
        st.metric(
            label="Active Users",
            value="456",
            delta="-12 (-2.5%)",
            delta_color="inverse",
        )

    with col3:
        st.metric(
            label="Revenue",
            value="$12,345",
            delta="$1,234 (10%)",
        )

    st.markdown("---")

    # Sample chart
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("📊 Sample Line Chart")
        df = load_sample_data()
        fig = px.line(df, x="date", y="value", title="Time Series Data")
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.subheader("📈 Sample Bar Chart")
        df_bar = pd.DataFrame({
            "category": ["A", "B", "C", "D"],
            "values": [23, 45, 56, 78]
        })
        fig = px.bar(df_bar, x="category", y="values", title="Category Distribution")
        st.plotly_chart(fig, use_container_width=True)

    # Data table
    st.subheader("📋 Data Table")
    if st.checkbox("Show raw data"):
        st.dataframe(df, use_container_width=True)


def render_analytics():
    """Render the analytics tab."""
    st.header("📈 Analytics")

    # File uploader
    uploaded_file = st.file_uploader(
        "Choose a CSV file",
        type=["csv"],
        help="Upload a CSV file for analysis"
    )

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.success(f"Loaded {len(df)} rows and {len(df.columns)} columns")

        # Display basic statistics
        st.subheader("Data Overview")
        st.write(df.describe())

        # Column selector for visualization
        numeric_cols = df.select_dtypes(include=["float64", "int64"]).columns.tolist()
        if numeric_cols:
            selected_col = st.selectbox("Select column to visualize", numeric_cols)

            col1, col2 = st.columns(2)
            with col1:
                fig = px.histogram(df, x=selected_col, title=f"Distribution of {selected_col}")
                st.plotly_chart(fig, use_container_width=True)

            with col2:
                fig = px.box(df, y=selected_col, title=f"Box Plot of {selected_col}")
                st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Upload a CSV file to start analyzing")


def render_settings():
    """Render the settings tab."""
    st.header("⚙️ Settings")

    # Configuration form
    with st.form("settings_form"):
        st.subheader("Application Settings")

        col1, col2 = st.columns(2)

        with col1:
            api_url = st.text_input("API URL", value=settings.api_url)
            refresh_rate = st.number_input("Refresh Rate (seconds)", min_value=1, value=60)
            theme = st.selectbox("Theme", ["Light", "Dark", "Auto"])

        with col2:
            debug_mode = st.checkbox("Debug Mode", value=settings.debug_mode)
            cache_enabled = st.checkbox("Enable Cache", value=True)
            notifications = st.checkbox("Enable Notifications", value=True)

        submitted = st.form_submit_button("Save Settings")
        if submitted:
            st.success("Settings saved successfully!")

    # Session state viewer
    st.subheader("Session State")
    if st.checkbox("Show session state"):
        st.json(dict(st.session_state))

    # Counter example
    st.subheader("Interactive Counter")
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("Increment"):
            st.session_state.counter += 1
    with col2:
        if st.button("Decrement"):
            st.session_state.counter -= 1
    with col3:
        if st.button("Reset"):
            st.session_state.counter = 0

    st.info(f"Counter value: {st.session_state.counter}")


if __name__ == "__main__":
    main()