"""Structured logging configuration."""

import logging
import sys
from typing import Any

import structlog
from structlog.processors import CallsiteParameter, CallsiteParameterAdder
from structlog.typing import Processor

from {{ pkg_name | replace("-", "_") }}.config import settings


def setup_logging() -> None:
    """Configure structured logging for the application."""

    # Configure Python logging
    logging.basicConfig(
        format="%(message)s",
        stream=sys.stdout,
        level=getattr(logging, settings.log_level),
    )

    # Processors for structlog
    processors: list[Processor] = [
        structlog.contextvars.merge_contextvars,
        structlog.processors.add_log_level,
        structlog.processors.StackInfoRenderer(),
        structlog.dev.set_exc_info,
        CallsiteParameterAdder(
            parameters=[
                CallsiteParameter.FILENAME,
                CallsiteParameter.LINENO,
                CallsiteParameter.FUNC_NAME,
            ]
        ),
        structlog.processors.TimeStamper(fmt="iso"),
    ]

    if settings.environment == "development":
        processors.append(structlog.dev.ConsoleRenderer())
    else:
        processors.append(structlog.processors.JSONRenderer())

    # Configure structlog
    structlog.configure(
        processors=processors,
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        cache_logger_on_first_use=True,
    )


def get_logger(name: str | None = None, **context: Any) -> structlog.BoundLogger:
    """Get a logger instance with optional context.

    Args:
        name: Logger name (typically __name__)
        **context: Additional context to bind to the logger

    Returns:
        A bound logger instance
    """
    logger = structlog.get_logger(name)
    if context:
        logger = logger.bind(**context)
    return logger


# Initialize logging on import
setup_logging()