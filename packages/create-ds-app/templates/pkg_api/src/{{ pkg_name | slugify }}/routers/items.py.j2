"""Example items router."""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel

router = APIRouter()


class Item(BaseModel):
    """Item model."""
    id: int | None = None
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


class ItemCreate(BaseModel):
    """Item creation model."""
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


# In-memory storage for demo
items_db: dict[int, Item] = {}
next_id = 1


@router.get("/items")
async def list_items(skip: int = 0, limit: int = 10):
    """List all items."""
    items = list(items_db.values())[skip : skip + limit]
    return {"items": items, "total": len(items_db)}


@router.get("/items/{item_id}")
async def get_item(item_id: int):
    """Get a specific item."""
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    return items_db[item_id]


@router.post("/items")
async def create_item(item: ItemCreate):
    """Create a new item."""
    global next_id
    new_item = Item(
        id=next_id,
        name=item.name,
        description=item.description,
        price=item.price,
        tax=item.tax,
    )
    items_db[next_id] = new_item
    next_id += 1
    return new_item


@router.put("/items/{item_id}")
async def update_item(item_id: int, item: ItemCreate):
    """Update an existing item."""
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")

    updated_item = Item(
        id=item_id,
        name=item.name,
        description=item.description,
        price=item.price,
        tax=item.tax,
    )
    items_db[item_id] = updated_item
    return updated_item


@router.delete("/items/{item_id}")
async def delete_item(item_id: int):
    """Delete an item."""
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")

    del items_db[item_id]
    return {"message": "Item deleted"}