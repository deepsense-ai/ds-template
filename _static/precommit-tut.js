let tutorial_content =
{"story":"<h1 id=\"precommit-configuration\"><span data-effect-id=\"effect-1675090792433-9\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"e2a24af2af47c5d8996823bd88249127\">Precommit configuration.</span></h1><p>Let&#x27;s have a quick tour over <em>example</em> configuration file - it might not be up to date with the one in use but is close enough.</p><p>By default all rules are enforced on every commit to ensure that code quality is always good and to ensure people get it as a habit.</p><p><span data-effect-id=\"effect-1675090762701-7\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"4ac803e84f0d98a27a7604c8c68aab62\">All tools are downloaded and installed from git repositories</span> -  <code>repo: </code>provides git address and <code><span data-effect-id=\"effect-1675160355787-1\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"4ac803e84f0d98a27a7604c8c68aab62\">rev:</span></code> is name of the git tag to checkout.</p><h2 id=\"standard-pre-commit-hooks\"><span data-effect-id=\"effect-1675090860737-19\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"b9deff4dccaa5abd145679d88dc43502\">Standard pre-commit hooks</span></h2><p><strong>pre-commit</strong> <strong>install </strong>called in git repository adds hooks on commit/push event. </p><p>By default we enable some basic set of checks. Most of them are quite obvious, but the best way is to visit <a href=\"https://pre-commit.com/\">https://pre-commit.com/</a> page to learn more.</p><p>We exclude &quot;.bumpversion.cfg&quot; because bump2version tool collides with trailing-whitespace.</p><p>To see a full list of supported checks and descriptions visit <a href=\"https://pre-commit.com/hooks.html\">list of supported hooks</a>.</p><h2 id=\"black\"><span data-effect-id=\"effect-1675091417862-33\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"1209d140109b216b3b7898bd5bf873d6\">Black</span></h2><p><strong>black</strong> is a PEP 8 compliant opinionated formatter for python code.  We use default black and also black-jupyter to format notebooks.</p><p>Configuration for black can be found in <strong>pyproject.toml</strong> file - under [tools.black].</p><p>We exclude docs/ directory.</p><h2 id=\"pycln\"><span data-effect-id=\"effect-1675091641546-42\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"8d80995dd8792cf0dec29891963f5f74\">Pycln</span></h2><p><strong>pycln</strong> is a formatter for finding and <strong>removing</strong> unused import statements. </p><p>By default we use &quot;-a&quot; option to remove all unused imports - including those with side effects - to ensure that import with side effects is not removed please <a href=\"https://hadialqattan.github.io/pycln/#/?id=pycln-skips\">check official documentation </a>. Simplest way is to add after import <code># noqa or <strong># nopycln: import</strong></code></p><h2 id=\"mypy\"><strong><span data-effect-id=\"effect-1675092025141-54\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"d212c44ebc57b562ac77396d68307a24\">MyPy</span></strong></h2><p>Unfortunately, python has no builtin type checker and types are not very well supported. We preconfigure <strong>mypy</strong> but without too strict options - this should help catch some big troubles but without too many tiresome false positives.</p><p>Configuration is defined in <strong>pyproject.toml</strong> file under [tool.mypy].</p><p>Here we also disable mypy to run in certain files/directories - tests or research are places where mypy might not be too useful and only lead to frustration.</p><p><strong><code><span data-effect-id=\"effect-1675092385362-56\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"98da5353d589ca358c01f75793cb1c75\">IMPORTANT: you should install any extra type packages and configure it to your own project!</span></code></strong></p><p>To be clear, there is also option to make mypy try to automate this, but it requires at least two runs of mypy - so it could not be easily added to template. Please read about<strong><code> --install-packages </code></strong>mypy option.</p><h2 id=\"isort\"><span data-effect-id=\"effect-1675092959474-68\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"7237b13f14b0828bb644bc129e24fbaa\">isort</span></h2><p><strong>isort</strong> reorganizes imports so it is like:</p><ul><li>python</li><li>third-party libraries</li><li>our code</li></ul><p>And each in group is sorted alphabetically and organized nicely.</p><p>As usual, <strong>pyproject.toml </strong>has configuration under [tools.isort] and you need to keep <strong>known_first_party </strong>and <strong>know_third_party</strong> up to date to ensure it can sort it correctly. It is preconfigured by default with some popular libraries.</p><h1 id=\"flake8\"><span data-effect-id=\"effect-1675160844397-8\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"bd6a0f37e52fe573c5ee1cc8b325dd65\">flake8</span></h1><p><strong>flake8</strong> is a wrapper around a few tools to ensure code quality. It glues pycodestyle, pyflakes, mccabe and some other third-party plugins to check style and quality.</p><p>Sadly, flake8 cannot be configured via <em>pyproject</em>.<em>toml </em>file yet - that is a reason why<code><span data-effect-id=\"effect-1675160954110-10\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"890a4f32a57e9532c8f0901945f50ec7\"> --config .flake8</span></code> is added.</p><p>Use<strong> .flake8</strong> file to change configuration.</p><h1 id=\"pylint\"><span data-effect-id=\"effect-1675162162240-22\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"890a4f32a57e9532c8f0901945f50ec7\">pylint</span></h1><p>pylint is used to enforce coding standard and assumes that docstrings are present and based on google approach.</p><p>Configuration is in <strong>pyproject.toml </strong>under [tool.pylint] category. It is preconfigured to suppress some noisy errors/collisions with other linters and provides configuration based on existing projects.</p><p>We exclude tests/ directory.</p><h1 id=\"bandit\"><span data-effect-id=\"effect-1675162214484-32\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"fa4401b87bd05c1759f8eea405579138\">bandit</span></h1><p><strong>bandit</strong> is used to ensure good security practices. It can detect unsafe python code, some private keys etc.</p><p>There is no configuration file for bandit.</p><h1 id=\"pyupgrade\"><span data-effect-id=\"effect-1676884764722-6\" data-effect-type=\"invisible\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"ff33be53494f19a3d92d057e67875386\">pyupgrade</span></h1><p><strong>pyupgrade</strong> allows to modernize python codebase and ensures that code uses features at least of given python version. </p><p>It can automatically update syntax to<span data-effect-id=\"effect-1676884909886-12\" data-effect-subject=\"e6fdab5b910bec650eb0b41b6fe0d761\" data-effect-version=\"e2760f3f803e200688e7966aeecdcd89\"> a given</span> newer versions of the language. For example you can set the version to python 3.8.</p><p></p><p></p><p></p><p></p>","subjectIndex":["e6fdab5b910bec650eb0b41b6fe0d761"],"subjects":{"e6fdab5b910bec650eb0b41b6fe0d761":{"created_at":1674821213486,"language":"yaml","name":".pre-commit-config.yaml","type":"code","versionIndex":["e2a24af2af47c5d8996823bd88249127","4ac803e84f0d98a27a7604c8c68aab62","b9deff4dccaa5abd145679d88dc43502","1209d140109b216b3b7898bd5bf873d6","8d80995dd8792cf0dec29891963f5f74","d212c44ebc57b562ac77396d68307a24","982f8d3e786a067df8dc15a1cfbd6749","98da5353d589ca358c01f75793cb1c75","7237b13f14b0828bb644bc129e24fbaa","bd6a0f37e52fe573c5ee1cc8b325dd65","df159d5eabb02e65916b3cab852b40dd","890a4f32a57e9532c8f0901945f50ec7","fa4401b87bd05c1759f8eea405579138","ff33be53494f19a3d92d057e67875386","e2760f3f803e200688e7966aeecdcd89"],"versions":{"1209d140109b216b3b7898bd5bf873d6":{"created_at":1675090499147,"value":"repos:\n    ...\n      # PEP 8 compliant opinionated formatter.\n    - repo: https://github.com/psf/black\n      rev: 22.8.0\n      hooks:\n          - id: black\n            exclude: (docs/)\n          - id: black-jupyter\n            exclude: (docs/)\n    ..."},"4ac803e84f0d98a27a7604c8c68aab62":{"created_at":1675090499147,"value":"repos:\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v4.3.0"},"7237b13f14b0828bb644bc129e24fbaa":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Sort imports alphabetically, and automatically separated into sections and by type.\n    - repo: https://github.com/timothycrosley/isort\n      rev: 5.12.0\n      hooks:\n          - id: isort\n            args: [\"--profile\", \"black\"]\n            exclude: (docs/)\n      ..."},"890a4f32a57e9532c8f0901945f50ec7":{"created_at":1675090499147,"value":"repos:\n    ...\n    # Enforces a coding standard, looks for code smells, and can make suggestions about how the code could be refactored.\n    - repo: https://github.com/pycqa/pylint\n      rev: v2.15.2\n      hooks:\n          - id: pylint\n            exclude: (/test_|tests/|docs/)\n   ..."},"8d80995dd8792cf0dec29891963f5f74":{"created_at":1675090499147,"value":"repos:\n    ...\n      # Cleaning unused imports.\n    - repo: https://github.com/hadialqattan/pycln\n      rev: v2.1.1\n      hooks:\n          - id: pycln\n            args: [\"-a\"]\n            exclude: (docs/)\n    ..."},"982f8d3e786a067df8dc15a1cfbd6749":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Used to have proper type annotations for library code.\n    - repo: https://github.com/pre-commit/mirrors-mypy\n      rev: v0.982\n      hooks:\n          - id: mypy\n            args: []\n            additional_dependencies: []\n            exclude: (/test_|setup.py|/tests/|docs/)\n\n    ..."},"98da5353d589ca358c01f75793cb1c75":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Used to have proper type annotations for library code.\n    - repo: https://github.com/pre-commit/mirrors-mypy\n      rev: v0.982\n      hooks:\n          - id: mypy\n            args: []\n            additional_dependencies: []\n            exclude: (/test_|setup.py|/tests/|docs/)\n            additional_dependencies: [\n              \"fastapi~=0.83.0\",\n              \"numpy~=1.23.3\",\n            ]\n\n    ..."},"b9deff4dccaa5abd145679d88dc43502":{"created_at":1675090499147,"value":"repos:\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v4.3.0\n      hooks:\n          - id: check-case-conflict\n          - id: check-merge-conflict\n          - id: trailing-whitespace\n            exclude: \".bumpversion.cfg\"\n          - id: check-ast\n          - id: check-added-large-files\n          - id: check-toml\n          - id: check-json\n          - id: check-yaml\n"},"bd6a0f37e52fe573c5ee1cc8b325dd65":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Checks Python source files for errors.\n    - repo: https://github.com/PyCQA/flake8\n      rev: 3.9.2\n      hooks:\n          - id: flake8\n            name: flake8\n            entry: flake8\n            language: python\n            types: [python]\n            exclude: (docs/)\n   ..."},"d212c44ebc57b562ac77396d68307a24":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Used to have proper type annotations for library code.\n    - repo: https://github.com/pre-commit/mirrors-mypy\n      rev: v0.982\n      hooks:\n          - id: mypy\n            args: []\n            additional_dependencies: []\n            exclude: (/test_|setup.py|/tests/|docs/)\n\n    ..."},"df159d5eabb02e65916b3cab852b40dd":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Checks Python source files for errors.\n    - repo: https://github.com/PyCQA/flake8\n      rev: 3.9.2\n      hooks:\n          - id: flake8\n            name: flake8\n            entry: flake8\n            language: python\n            types: [python]\n            args: [--config, .flake8]\n            exclude: (docs/)\n   ..."},"e2760f3f803e200688e7966aeecdcd89":{"created_at":1675090499147,"value":"repos:\n    ...\n    # Modernizes python code and upgrade syntax for newer versions of the language\n    - repo: https://github.com/asottile/pyupgrade\n      rev: v3.3.1\n      hooks:\n          - id: pyupgrade\n            args: [--py38-plus]\n   ..."},"e2a24af2af47c5d8996823bd88249127":{"value":"repos:\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v4.3.0\n      hooks:\n          - id: check-case-conflict\n          - id: check-merge-conflict\n          - id: trailing-whitespace\n            exclude: \".bumpversion.cfg\"\n          - id: check-ast\n          - id: check-added-large-files\n          - id: check-toml\n          - id: check-json\n          - id: check-yaml\n\n      # PEP 8 compliant opinionated formatter.\n    - repo: https://github.com/psf/black\n      rev: 22.8.0\n      hooks:\n          - id: black\n            exclude: (docs/)\n          - id: black-jupyter\n            exclude: (docs/)\n\n      # Cleaning unused imports.\n    - repo: https://github.com/hadialqattan/pycln\n      rev: v2.1.1\n      hooks:\n          - id: pycln\n            args: [\"-a\"]\n            exclude: (docs/)\n\n      # Used to have proper type annotations for library code.\n    - repo: https://github.com/pre-commit/mirrors-mypy\n      rev: v0.982\n      hooks:\n          - id: mypy\n            args: []\n            additional_dependencies: []\n            exclude: (/test_|setup.py|/tests/|docs/)\n\n    # Modernizes python code and upgrade syntax for newer versions of the language\n    - repo: https://github.com/asottile/pyupgrade\n      rev: v3.3.1\n      hooks:\n          - id: pyupgrade\n            args: [--py38-plus]\n\n      # Sort imports alphabetically, and automatically separated into sections and by type.\n    - repo: https://github.com/timothycrosley/isort\n      rev: 5.12.0\n      hooks:\n          - id: isort\n            args: [\"--profile\", \"black\"]\n            exclude: (docs/)\n\n      # Checks Python source files for errors.\n    - repo: https://github.com/PyCQA/flake8\n      rev: 3.9.2\n      hooks:\n          - id: flake8\n            name: flake8\n            entry: flake8\n            language: python\n            types: [python]\n            args: [--config, .flake8]\n            exclude: (docs/)\n\n      # Enforces a coding standard, looks for code smells, and can make suggestions about how the code could be refactored.\n    - repo: https://github.com/pycqa/pylint\n      rev: v2.15.2\n      hooks:\n          - id: pylint\n            exclude: (/test_|tests/|docs/)\n\n      # Finds common security issues in Python code.\n    - repo: https://github.com/Lucas-C/pre-commit-hooks-bandit\n      rev: v1.0.5\n      hooks:\n          - id: python-bandit-vulnerability-check\n            args: [--recursive, clumper]\n"},"fa4401b87bd05c1759f8eea405579138":{"created_at":1675090499147,"value":"repos:\n    ...\n     # Finds common security issues in Python code.\n    - repo: https://github.com/Lucas-C/pre-commit-hooks-bandit\n      rev: v1.0.5\n      hooks:\n          - id: python-bandit-vulnerability-check\n            args: [--recursive, clumper]\n   ..."},"ff33be53494f19a3d92d057e67875386":{"created_at":1675090499147,"value":"repos:\n    ...\n    # Modernizes python code and upgrade syntax for newer versions of the language\n    - repo: https://github.com/asottile/pyupgrade\n      rev: v3.3.1\n      hooks:\n          - id: pyupgrade\n   ..."}}}},"title":"precommit-config","version":"0.3.1"}