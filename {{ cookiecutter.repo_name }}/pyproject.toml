[project]
name = "{{ cookiecutter.__package_name }}"
# do not change version by hand: use bump_version.sh
version = "0.0.1-dev"
description = "deepsense.ai project"
readme = "README.md"
requires-python = ">=3.8"
license = "LicenseRef-Proprietary"
license-files = ["LICENSE.md"]
authors = [
    { name = "deepsense.ai", email = "contact@deepsense.ai" }
]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: AI",
    "Private :: Do Not Upload"
]
dependencies = [
    "python-dotenv>=0.5.1",
    "setuptools >= 40.9.0",
    "wheel==0.41.3",
    # add your dependencies below...
]

[tool.uv]
dev-dependencies = [
    "pre-commit",
    "ruff>=0.11.0",
    "pytest>=6.2.5",
    "pytest-cov",
    "pip-licenses>=4.0.0,<5.0.0", # for getting dependency licenses and docs
    "sphinx>=5.3.0,<6.0.0", # for building docs
    "sphinx-rtd-theme>=1.1.1,<2.0.0",
    "myst-parser", # adds markdown to sphinx
    "sphinxcontrib-mermaid", # adds option to have diagrams in sphinx
    "snowballstemmer==2.2.0",
    "bump2version>=1.0.1,<2.0.0" # for bumping version strings
]

[project.scripts]  # Define entry points for the application
hello-world = "{{ cookiecutter.__package_name }}.hello:hello_world"

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = { "" = "src" }
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"{{ cookiecutter.__package_name }}" = ["py.typed"]

[tool.pytest]
norecursedirs = [
    '.git',
    '.tox',
    '.env',
    'dist',
    'build',
    'migrations',
    'docker',
    'config',
    'notebooks',
    'research',
]
python_files = ['test_*.py']
addopts = [
    '-ra',
    '--showlocals',
    '--strict-markers',
    '--ignore=docs/conf.py',
    '--ignore=setup.py',
    '--ignore=ci',
    '--ignore=.eggs',
    '--doctest-modules',
    '--doctest-glob=\*.rst',
    '--tb=short',
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
warn_unused_ignores = false
show_error_codes = true
check_untyped_defs = true
no_implicit_optional = true
explicit_package_bases = true
mypy_path = "src"

[[tool.mypy.overrides]]
module = "{{ cookiecutter.__package_name }}.*"
ignore_missing_imports = false
disallow_untyped_defs = true

[tool.ruff]
exclude = [".venv"]
extend-include = ["*.ipynb"]
line-length = 120

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = [
    # Default rules
    "E", # pycodestyle errors
    "F", # Pyflakes
    "C4", # flake8-comprehensions
    "C90", # mccabe complex structure
    "D", # pydocstyle
    "I", # isort
    "PT", # flake8-pytest-style
    "PL", # Pylint
    "SIM", # flake8-simplify
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "S", # flake8-bandit
    "ANN", # flake8-annotations
    "B", # flake8-bugbear
    "NPY", # NumPy-specific rules
]
extend-select = [
    "RUF022", # unsorted-dunder-all
    "PLR6301", # no-self-use
]
ignore = [
    "B024",
    "B028", # no-explicit-stacklevel
    "C901", # complex-structure
    "D100",
    "D104",
    "D105",
    "D107",
    "D415",
    "D200",
    "D205",
    "D212",
    "ANN002",
    "ANN003",
    "ANN204", # dynamically typed expressions
    "ANN401",
    "PLR0913",
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.pylint]
max-locals = 20

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "PLR2004",
    "W293",
    "D101", # D*** - we should not require docs in every Jupyter notebook
    "D102",
    "D103",
    "D107"
]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "PT011", # we prefer assert at the end of the test instead of using "match" parameter in pytest.raises
    "ANN201", # Missing return type annotation
    "PLR2004", # Magic numbers are ok in tests
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.isort]
known-first-party = ['{{ cookiecutter.__package_name }}']
known-third-party = [ # Most popular libraries. Extend if necessary.
    "IPython",
    "PIL",
    "cv2",
    "dotenv",
    "editdistance",
    "fastapi",
    "fire",
    "hydra",
    "joblib",
    "loguru",
    "luigi",
    "matplotlib",
    "neptune",
    "neptune_config",
    "nltk",
    "numpy",
    "omegaconf",
    "pandas",
    "pqdm",
    "pydantic",
    "pytest",
    "pytorch_lightning",
    "requests",
    "scipy",
    "setuptools",
    "shapely",
    "skimage",
    "sklearn",
    "streamlit",
    "torch",
    "torchvision",
    "tqdm",
    "typer",
]
